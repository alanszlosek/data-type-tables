Makes no sense to differentiate relationship direction. Create two records, one point each way, will just make things easier.

I do like how you can use c=type(Product) and then c() to instantiate a Product.

Inserts of all fields will be quite expensive: multiple indices to update, across several tables.

Best for apps with few data modifications compared to reads, since inserts might cover 4 tables, where each requires an index update.

Also, best for apps with minimal searching. Joins are fine, but searching, ugh.

What are the advantages of this sort of setup?

	Would say that you don't have to change the database schema, but if you need a way to specify releationships other than Relationship and Tree, you have to modify the db.

	Would say that it does away with needing to cache the DB structure (fields, foreign keys) like Rails or my PHP Ormer does (in file with PHP data structure) ...

	And it lacks some of the automated setup that Rails or ORMer gives, since you have to specify field names and types.

What are the cons?

	In many cases, requires more queries.

	Using a non-relational DBMS makes more sense, if you're making a large app with a constantly changing schema. Wonder if this project could sit on top of one of those.

Wanted to do a proof-of-concept with this project, wordpress like app, but with better extensibility and flexiblity, leaning more in the CMS direction. 

publicize as reasearch: if you think good idea to do datatypetables, try using this for queries and search especially.

where clauses become: A or B group by id having count(id) = len(where)
BUT A="key = 'name' and value='hmm'" !!!
... or do JOIN for each clause?

probably good for reading, and changing schema, but not search

would views help?

QUESTIONS

What about sorting? Should I have another table of sort values, similar to Relationship?
	select id from Sorting where type='Product' and key='name' order by value;
	create table Sorting (id text, type text, key text, value integer, language text, createdAt text, updatedAt text);

	Suppose I could have just done:
		select id from Text where type='Product' and key='name' order by value;

	But I imagined there might be more complex sorting scenarios to merit another table. It'd have to be populated manually with the values you might want to sort on. This would also allow you to name your sort set, so you could have multiple sort sets per Type.
